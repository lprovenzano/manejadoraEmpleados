{"version":3,"sources":["node_modules/systemjs/dist/system.js"],"names":[],"mappingsfile":"system.da3dc50e.js","sourceRoot":"..","sourcesContent":["/*\n* SystemJS 3.1.6\n*/\n(function () {\n  const hasSelf = typeof self !== 'undefined';\r\n\r\n  const envGlobal = hasSelf ? self : global;\r\n\r\n  let baseUrl;\r\n  if (typeof location !== 'undefined') {\r\n    baseUrl = location.href.split('#')[0].split('?')[0];\r\n    const lastSepIndex = baseUrl.lastIndexOf('/');\r\n    if (lastSepIndex !== -1)\r\n      baseUrl = baseUrl.slice(0, lastSepIndex + 1);\r\n  }\r\n\r\n  const backslashRegEx = /\\\\/g;\r\n  function resolveIfNotPlainOrUrl (relUrl, parentUrl) {\r\n    if (relUrl.indexOf('\\\\') !== -1)\r\n      relUrl = relUrl.replace(backslashRegEx, '/');\r\n    // protocol-relative\r\n    if (relUrl[0] === '/' && relUrl[1] === '/') {\r\n      return parentUrl.slice(0, parentUrl.indexOf(':') + 1) + relUrl;\r\n    }\r\n    // relative-url\r\n    else if (relUrl[0] === '.' && (relUrl[1] === '/' || relUrl[1] === '.' && (relUrl[2] === '/' || relUrl.length === 2 && (relUrl += '/')) ||\r\n        relUrl.length === 1  && (relUrl += '/')) ||\r\n        relUrl[0] === '/') {\r\n      const parentProtocol = parentUrl.slice(0, parentUrl.indexOf(':') + 1);\r\n      // Disabled, but these cases will give inconsistent results for deep backtracking\r\n      //if (parentUrl[parentProtocol.length] !== '/')\r\n      //  throw new Error('Cannot resolve');\r\n      // read pathname from parent URL\r\n      // pathname taken to be part after leading \"/\"\r\n      let pathname;\r\n      if (parentUrl[parentProtocol.length + 1] === '/') {\r\n        // resolving to a :// so we need to read out the auth and host\r\n        if (parentProtocol !== 'file:') {\r\n          pathname = parentUrl.slice(parentProtocol.length + 2);\r\n          pathname = pathname.slice(pathname.indexOf('/') + 1);\r\n        }\r\n        else {\r\n          pathname = parentUrl.slice(8);\r\n        }\r\n      }\r\n      else {\r\n        // resolving to :/ so pathname is the /... part\r\n        pathname = parentUrl.slice(parentProtocol.length + (parentUrl[parentProtocol.length] === '/'));\r\n      }\r\n\r\n      if (relUrl[0] === '/')\r\n        return parentUrl.slice(0, parentUrl.length - pathname.length - 1) + relUrl;\r\n\r\n      // join together and split for removal of .. and . segments\r\n      // looping the string instead of anything fancy for perf reasons\r\n      // '../../../../../z' resolved to 'x/y' is just 'z'\r\n      const segmented = pathname.slice(0, pathname.lastIndexOf('/') + 1) + relUrl;\r\n\r\n      const output = [];\r\n      let segmentIndex = -1;\r\n      for (let i = 0; i < segmented.length; i++) {\r\n        // busy reading a segment - only terminate on '/'\r\n        if (segmentIndex !== -1) {\r\n          if (segmented[i] === '/') {\r\n            output.push(segmented.slice(segmentIndex, i + 1));\r\n            segmentIndex = -1;\r\n          }\r\n        }\r\n\r\n        // new segment - check if it is relative\r\n        else if (segmented[i] === '.') {\r\n          // ../ segment\r\n          if (segmented[i + 1] === '.' && (segmented[i + 2] === '/' || i + 2 === segmented.length)) {\r\n            output.pop();\r\n            i += 2;\r\n          }\r\n          // ./ segment\r\n          else if (segmented[i + 1] === '/' || i + 1 === segmented.length) {\r\n            i += 1;\r\n          }\r\n          else {\r\n            // the start of a new segment as below\r\n            segmentIndex = i;\r\n          }\r\n        }\r\n        // it is the start of a new segment\r\n        else {\r\n          segmentIndex = i;\r\n        }\r\n      }\r\n      // finish reading out the last segment\r\n      if (segmentIndex !== -1)\r\n        output.push(segmented.slice(segmentIndex));\r\n      return parentUrl.slice(0, parentUrl.length - pathname.length) + output.join('');\r\n    }\r\n  }\r\n\r\n  /*\r\n   * Import maps implementation\r\n   * \r\n   * To make lookups fast we pre-resolve the entire import map\r\n   * and then match based on backtracked hash lookups\r\n   * \r\n   */\r\n\r\n  function resolveUrl (relUrl, parentUrl) {\r\n    return resolveIfNotPlainOrUrl(relUrl, parentUrl) ||\r\n        relUrl.indexOf(':') !== -1 && relUrl ||\r\n        resolveIfNotPlainOrUrl('./' + relUrl, parentUrl);\r\n  }\r\n\r\n  function resolvePackages(pkgs, baseUrl) {\r\n    var outPkgs = {};\r\n    for (var p in pkgs) {\r\n      var value = pkgs[p];\r\n      // TODO package fallback support\r\n      if (typeof value !== 'string')\r\n        continue;\r\n      outPkgs[resolveIfNotPlainOrUrl(p, baseUrl) || p] = resolveUrl(value, baseUrl);\r\n    }\r\n    return outPkgs;\r\n  }\r\n\r\n  function parseImportMap (json, baseUrl) {\r\n    const imports = resolvePackages(json.imports, baseUrl) || {};\r\n    const scopes = {};\r\n    if (json.scopes) {\r\n      for (let scopeName in json.scopes) {\r\n        const scope = json.scopes[scopeName];\r\n        let resolvedScopeName = resolveUrl(scopeName, baseUrl);\r\n        if (resolvedScopeName[resolvedScopeName.length - 1] !== '/')\r\n          resolvedScopeName += '/';\r\n        scopes[resolvedScopeName] = resolvePackages(scope, resolvedScopeName) || {};\r\n      }\r\n    }\r\n\r\n    return { imports: imports, scopes: scopes };\r\n  }\r\n\r\n  function getMatch (path, matchObj) {\r\n    if (matchObj[path])\r\n      return path;\r\n    let sepIndex = path.length;\r\n    do {\r\n      const segment = path.slice(0, sepIndex + 1);\r\n      if (segment in matchObj)\r\n        return segment;\r\n    } while ((sepIndex = path.lastIndexOf('/', sepIndex - 1)) !== -1)\r\n  }\r\n\r\n  function applyPackages (id, packages) {\r\n    const pkgName = getMatch(id, packages);\r\n    if (pkgName) {\r\n      const pkg = packages[pkgName];\r\n      if (pkg === null)\r\n\r\n      if (id.length > pkgName.length && pkg[pkg.length - 1] !== '/')\r\n        console.warn(\"Invalid package target \" + pkg + \" for '\" + pkgName + \"' should have a trailing '/'.\");\r\n      return pkg + id.slice(pkgName.length);\r\n    }\r\n  }\r\n\r\n  function resolveImportMap (id, parentUrl, importMap) {\r\n    const urlResolved = resolveIfNotPlainOrUrl(id, parentUrl) || id.indexOf(':') !== -1 && id;\r\n    if (urlResolved)\r\n      id = urlResolved;\r\n    const scopeName = getMatch(parentUrl, importMap.scopes);\r\n    if (scopeName) {\r\n      const scopePackages = importMap.scopes[scopeName];\r\n      const packageResolution = applyPackages(id, scopePackages);\r\n      if (packageResolution)\r\n        return packageResolution;\r\n    }\r\n    return applyPackages(id, importMap.imports) || urlResolved || throwBare(id, parentUrl);\r\n  }\r\n\r\n  function throwBare (id, parentUrl) {\r\n    throw new Error('Unable to resolve bare specifier \"' + id + (parentUrl ? '\" from ' + parentUrl : '\"'));\r\n  }\n\n  /*\r\n   * SystemJS Core\r\n   * \r\n   * Provides\r\n   * - System.import\r\n   * - System.register support for\r\n   *     live bindings, function hoisting through circular references,\r\n   *     reexports, dynamic import, import.meta.url, top-level await\r\n   * - System.getRegister to get the registration\r\n   * - Symbol.toStringTag support in Module objects\r\n   * - Hookable System.createContext to customize import.meta\r\n   * - System.onload(id, err?) handler for tracing / hot-reloading\r\n   * \r\n   * Core comes with no System.prototype.resolve or\r\n   * System.prototype.instantiate implementations\r\n   */\r\n\r\n  const hasSymbol = typeof Symbol !== 'undefined';\r\n  const toStringTag = hasSymbol && Symbol.toStringTag;\r\n  const REGISTRY = hasSymbol ? Symbol() : '@';\r\n\r\n  function SystemJS () {\r\n    this[REGISTRY] = {};\r\n  }\r\n\r\n  const systemJSPrototype = SystemJS.prototype;\r\n  systemJSPrototype.import = function (id, parentUrl) {\r\n    const loader = this;\r\n    return Promise.resolve(loader.resolve(id, parentUrl))\r\n    .then(function (id) {\r\n      const load = getOrCreateLoad(loader, id);\r\n      return load.C || topLevelLoad(loader, load);\r\n    });\r\n  };\r\n\r\n  // Hookable createContext function -> allowing eg custom import meta\r\n  systemJSPrototype.createContext = function (parentId) {\r\n    return {\r\n      url: parentId\r\n    };\r\n  };\r\n\r\n  // onLoad(id, err) provided for tracing / hot-reloading\r\n  systemJSPrototype.onload = function () {};\r\n\r\n  let lastRegister;\r\n  systemJSPrototype.register = function (deps, declare) {\r\n    lastRegister = [deps, declare];\r\n  };\r\n\r\n  /*\r\n   * getRegister provides the last anonymous System.register call\r\n   */\r\n  systemJSPrototype.getRegister = function () {\r\n    const _lastRegister = lastRegister;\r\n    lastRegister = undefined;\r\n    return _lastRegister;\r\n  };\r\n\r\n  function getOrCreateLoad (loader, id, firstParentUrl) {\r\n    let load = loader[REGISTRY][id];\r\n    if (load)\r\n      return load;\r\n\r\n    const importerSetters = [];\r\n    const ns = Object.create(null);\r\n    if (toStringTag)\r\n      Object.defineProperty(ns, toStringTag, { value: 'Module' });\r\n    \r\n    let instantiatePromise = Promise.resolve()\r\n    .then(function () {\r\n      return loader.instantiate(id, firstParentUrl);\r\n    })\r\n    .then(function (registration) {\r\n      if (!registration)\r\n        throw new Error('Module ' + id + ' did not instantiate');\r\n      function _export (name, value) {\r\n        // note if we have hoisted exports (including reexports)\r\n        load.h = true;\r\n        let changed = false;\r\n        if (typeof name !== 'object') {\r\n          if (!(name in ns) || ns[name] !== value) {\r\n            ns[name] = value;\r\n            changed = true;\r\n          }\r\n        }\r\n        else {\r\n          for (let p in name) {\r\n            let value = name[p];\r\n            if (!(p in ns) || ns[p] !== value) {\r\n              ns[p] = value;\r\n              changed = true;\r\n            }\r\n          }\r\n        }\r\n        if (changed)\r\n          for (let i = 0; i < importerSetters.length; i++)\r\n            importerSetters[i](ns);\r\n        return value;\r\n      }\r\n      const declared = registration[1](_export, registration[1].length === 2 ? {\r\n        import: function (importId) {\r\n          return loader.import(importId, id);\r\n        },\r\n        meta: loader.createContext(id)\r\n      } : undefined);\r\n      load.e = declared.execute || function () {};\r\n      return [registration[0], declared.setters || []];\r\n    });\r\n\r\n    instantiatePromise = instantiatePromise.catch(function (err) {\r\n        loader.onload(load.id, err);\r\n        throw err;\r\n      });\r\n\r\n    const linkPromise = instantiatePromise\r\n    .then(function (instantiation) {\r\n      return Promise.all(instantiation[0].map(function (dep, i) {\r\n        const setter = instantiation[1][i];\r\n        return Promise.resolve(loader.resolve(dep, id))\r\n        .then(function (depId) {\r\n          const depLoad = getOrCreateLoad(loader, depId, id);\r\n          // depLoad.I may be undefined for already-evaluated\r\n          return Promise.resolve(depLoad.I)\r\n          .then(function () {\r\n            if (setter) {\r\n              depLoad.i.push(setter);\r\n              // only run early setters when there are hoisted exports of that module\r\n              // the timing works here as pending hoisted export calls will trigger through importerSetters\r\n              if (depLoad.h || !depLoad.I)\r\n                setter(depLoad.n);\r\n            }\r\n            return depLoad;\r\n          });\r\n        })\r\n      }))\r\n      .then(function (depLoads) {\r\n        load.d = depLoads;\r\n      });\r\n    });\r\n\r\n    linkPromise.catch(function (err) {\r\n      load.e = null;\r\n      load.er = err;\r\n    });\r\n\r\n    // Captial letter = a promise function\r\n    return load = loader[REGISTRY][id] = {\r\n      id: id,\r\n      // importerSetters, the setters functions registered to this dependency\r\n      // we retain this to add more later\r\n      i: importerSetters,\r\n      // module namespace object\r\n      n: ns,\r\n\r\n      // instantiate\r\n      I: instantiatePromise,\r\n      // link\r\n      L: linkPromise,\r\n      // whether it has hoisted exports\r\n      h: false,\r\n\r\n      // On instantiate completion we have populated:\r\n      // dependency load records\r\n      d: undefined,\r\n      // execution function\r\n      // set to NULL immediately after execution (or on any failure) to indicate execution has happened\r\n      // in such a case, pC should be used, and pLo, pLi will be emptied\r\n      e: undefined,\r\n\r\n      // On execution we have populated:\r\n      // the execution error if any\r\n      er: undefined,\r\n      // in the case of TLA, the execution promise\r\n      E: undefined,\r\n\r\n      // On execution, pLi, pLo, e cleared\r\n\r\n      // Promise for top-level completion\r\n      C: undefined\r\n    };\r\n  }\r\n\r\n  function instantiateAll (loader, load, loaded) {\r\n    if (!loaded[load.id]) {\r\n      loaded[load.id] = true;\r\n      // load.L may be undefined for already-instantiated\r\n      return Promise.resolve(load.L)\r\n      .then(function () {\r\n        return Promise.all(load.d.map(function (dep) {\r\n          return instantiateAll(loader, dep, loaded);\r\n        }));\r\n      })\r\n    }\r\n  }\r\n\r\n  function topLevelLoad (loader, load) {\r\n    return load.C = instantiateAll(loader, load, {})\r\n    .then(function () {\r\n      return postOrderExec(loader, load, {});\r\n    })\r\n    .then(function () {\r\n      return load.n;\r\n    });\r\n  }\r\n\r\n  // the closest we can get to call(undefined)\r\n  const nullContext = Object.freeze(Object.create(null));\r\n\r\n  // returns a promise if and only if a top-level await subgraph\r\n  // throws on sync errors\r\n  function postOrderExec (loader, load, seen) {\r\n    if (seen[load.id])\r\n      return;\r\n    seen[load.id] = true;\r\n\r\n    if (!load.e) {\r\n      if (load.er)\r\n        throw load.er;\r\n      if (load.E)\r\n        return load.E;\r\n      return;\r\n    }\r\n\r\n    // deps execute first, unless circular\r\n    let depLoadPromises;\r\n    load.d.forEach(function (depLoad) {\r\n      {\r\n        try {\r\n          const depLoadPromise = postOrderExec(loader, depLoad, seen);\r\n          if (depLoadPromise)\r\n            (depLoadPromises = depLoadPromises || []).push(depLoadPromise);\r\n        }\r\n        catch (err) {\r\n          loader.onload(load.id, err);\r\n          throw err;\r\n        }\r\n      }\r\n    });\r\n    if (depLoadPromises) {\r\n      return Promise.all(depLoadPromises)\r\n        .then(doExec)\r\n        .catch(function (err) {\r\n          loader.onload(load.id, err);\r\n          throw err;\r\n        });\r\n    }\r\n\r\n    return doExec();\r\n\r\n    function doExec () {\r\n      try {\r\n        let execPromise = load.e.call(nullContext);\r\n        if (execPromise) {\r\n          execPromise = execPromise.then(function () {\r\n              load.C = load.n;\r\n              load.E = null; // indicates completion\r\n              loader.onload(load.id, null);\r\n            }, function (err) {\r\n              loader.onload(load.id, err);\r\n              throw err;\r\n            });\r\n          return load.E = load.E || execPromise;\r\n        }\r\n        // (should be a promise, but a minify optimization to leave out Promise.resolve)\r\n        load.C = load.n;\r\n        loader.onload(load.id, null);\r\n      }\r\n      catch (err) {\r\n        loader.onload(load.id, err);\r\n        load.er = err;\r\n        throw err;\r\n      }\r\n      finally {\r\n        load.L = load.I = undefined;\r\n        load.e = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  envGlobal.System = new SystemJS();\n\n  /*\r\n   * Supports loading System.register via script tag injection\r\n   */\r\n\r\n  let err;\r\n  if (typeof window !== 'undefined')\r\n    window.addEventListener('error', function (e) {\r\n      err = e.error;\r\n    });\r\n\r\n  const systemRegister = systemJSPrototype.register;\r\n  systemJSPrototype.register = function (deps, declare) {\r\n    err = undefined;\r\n    systemRegister.call(this, deps, declare);\r\n  };\r\n\r\n  systemJSPrototype.instantiate = function (url, firstParentUrl) {\r\n    const loader = this;\r\n    return new Promise(function (resolve, reject) {\r\n      const script = document.createElement('script');\r\n      script.charset = 'utf-8';\r\n      script.async = true;\r\n      script.crossOrigin = 'anonymous';\r\n      script.addEventListener('error', function () {\r\n        reject(new Error('Error loading ' + url + (firstParentUrl ? ' from ' + firstParentUrl : '')));\r\n      });\r\n      script.addEventListener('load', function () {\r\n        document.head.removeChild(script);\r\n        // Note URL normalization issues are going to be a careful concern here\r\n        if (err) {\r\n          reject(err);\r\n          return err = undefined;\r\n        }\r\n        else {\r\n          resolve(loader.getRegister());\r\n        }\r\n      });\r\n      script.src = url;\r\n      document.head.appendChild(script);\r\n    });\r\n  };\n\n  /*\r\n   * Supports loading System.register in workers\r\n   */\r\n\r\n  if (hasSelf && typeof importScripts === 'function')\r\n    systemJSPrototype.instantiate = function (url) {\r\n      const loader = this;\r\n      return new Promise(function (resolve, reject) {\r\n        try {\r\n          importScripts(url);\r\n        }\r\n        catch (e) {\r\n          reject(e);\r\n        }\r\n        resolve(loader.getRegister());\r\n      });\r\n    };\n\n  /*\r\n   * SystemJS global script loading support\r\n   * Extra for the s.js build only\r\n   * (Included by default in system.js build)\r\n   */\r\n  (function (global) {\r\n\r\n  const systemJSPrototype = System.constructor.prototype;\r\n\r\n  // safari unpredictably lists some new globals first or second in object order\r\n  let firstGlobalProp, secondGlobalProp, lastGlobalProp;\r\n  function getGlobalProp () {\r\n    let cnt = 0;\r\n    let lastProp;\r\n    for (let p in global) {\r\n      if (!global.hasOwnProperty(p))\r\n        continue;\r\n      if (cnt === 0 && p !== firstGlobalProp || cnt === 1 && p !== secondGlobalProp)\r\n        return p;\r\n      cnt++;\r\n      lastProp = p;\r\n    }\r\n    if (lastProp !== lastGlobalProp)\r\n      return lastProp;\r\n  }\r\n\r\n  function noteGlobalProps () {\r\n    // alternatively Object.keys(global).pop()\r\n    // but this may be faster (pending benchmarks)\r\n    firstGlobalProp = secondGlobalProp = undefined;\r\n    for (let p in global) {\r\n      if (!global.hasOwnProperty(p))\r\n        continue;\r\n      if (!firstGlobalProp)\r\n        firstGlobalProp = p;\r\n      else if (!secondGlobalProp)\r\n        secondGlobalProp = p;\r\n      lastGlobalProp = p;\r\n    }\r\n    return lastGlobalProp;\r\n  }\r\n\r\n  const impt = systemJSPrototype.import;\r\n  systemJSPrototype.import = function (id, parentUrl) {\r\n    noteGlobalProps();\r\n    return impt.call(this, id, parentUrl);\r\n  };\r\n\r\n  const emptyInstantiation = [[], function () { return {} }];\r\n\r\n  const getRegister = systemJSPrototype.getRegister;\r\n  systemJSPrototype.getRegister = function () {\r\n    const lastRegister = getRegister.call(this);\r\n    if (lastRegister)\r\n      return lastRegister;\r\n    \r\n    // no registration -> attempt a global detection as difference from snapshot\r\n    // when multiple globals, we take the global value to be the last defined new global object property\r\n    // for performance, this will not support multi-version / global collisions as previous SystemJS versions did\r\n    // note in Edge, deleting and re-adding a global does not change its ordering\r\n    const globalProp = getGlobalProp();\r\n    if (!globalProp)\r\n      return emptyInstantiation;\r\n    \r\n    let globalExport;\r\n    try {\r\n      globalExport = global[globalProp];\r\n    }\r\n    catch (e) {\r\n      return emptyInstantiation;\r\n    }\r\n\r\n    return [[], function (_export) {\r\n      return { execute: function () { _export('default', globalExport); } };\r\n    }];\r\n  };\r\n\r\n  })(typeof self !== 'undefined' ? self : global);\n\n  /*\r\n   * Loads WASM based on file extension detection\r\n   * Assumes successive instantiate will handle other files\r\n   */\r\n  const instantiate = systemJSPrototype.instantiate;\r\n  systemJSPrototype.instantiate = function (url, parent) {\r\n    if (url.slice(-5) !== '.wasm')\r\n      return instantiate.call(this, url, parent);\r\n    \r\n    return fetch(url)\r\n    .then(function (res) {\r\n      if (!res.ok)\r\n        throw new Error(res.status + ' ' + res.statusText + ' ' + res.url + (parent ? ' loading from ' + parent : ''));\r\n\r\n      if (WebAssembly.compileStreaming)\r\n        return WebAssembly.compileStreaming(res);\r\n      \r\n      return res.arrayBuffer()\r\n      .then(function (buf) {\r\n        return WebAssembly.compile(buf);\r\n      });\r\n    })\r\n    .then(function (module) {\r\n      const deps = [];\r\n      const setters = [];\r\n      const importObj = {};\r\n\r\n      // we can only set imports if supported (eg early Safari doesnt support)\r\n      if (WebAssembly.Module.imports)\r\n        WebAssembly.Module.imports(module).forEach(function (impt) {\r\n          const key = impt.module;\r\n          setters.push(function (m) {\r\n            importObj[key] = m;\r\n          });\r\n          if (deps.indexOf(key) === -1)\r\n            deps.push(key);\r\n        });\r\n\r\n      return [deps, function (_export) {\r\n        return {\r\n          setters: setters,\r\n          execute: function () {\r\n            return WebAssembly.instantiate(module, importObj)\r\n            .then(function (instance) {\r\n              _export(instance.exports);\r\n            });\r\n          }\r\n        };\r\n      }];\r\n    });\r\n  };\n\n  /*\r\n   * Import map support for SystemJS\r\n   * \r\n   * <script type=\"systemjs-importmap\">{}</script>\r\n   * OR\r\n   * <script type=\"systemjs-importmap\" src=package.json></script>\r\n   * \r\n   * Only those import maps available at the time of SystemJS initialization will be loaded\r\n   * and they will be loaded in DOM order.\r\n   * \r\n   * There is no support for dynamic import maps injection currently.\r\n   */\r\n\r\n  const baseMap = Object.create(null);\r\n  baseMap.imports = Object.create(null);\r\n  baseMap.scopes = Object.create(null);\r\n  let importMapPromise = Promise.resolve(baseMap);\r\n  let acquiringImportMaps = typeof document !== 'undefined';\r\n\r\n  if (acquiringImportMaps) {\r\n    Array.prototype.forEach.call(document.querySelectorAll('script[type=\"systemjs-importmap\"][src]'), function (script) {\r\n      script._j = fetch(script.src).then(function (resp) {\r\n        return resp.json();\r\n      });\r\n    });\r\n  }\r\n\r\n  function mergeImportMap(originalMap, newMap) {\r\n    for (let i in newMap.imports) {\r\n      originalMap.imports[i] = newMap.imports[i];\r\n    }\r\n    for (let i in newMap.scopes) {\r\n      originalMap.scopes[i] = newMap.scopes[i];\r\n    }\r\n    return originalMap;\r\n  }\r\n\r\n  systemJSPrototype.resolve = function (id, parentUrl) {\r\n    parentUrl = parentUrl || baseUrl;\r\n\r\n    if (acquiringImportMaps) {\r\n      acquiringImportMaps = false;\r\n      Array.prototype.forEach.call(document.querySelectorAll('script[type=\"systemjs-importmap\"]'), function (script) {\r\n        importMapPromise = importMapPromise.then(function (map) {\r\n          return (script._j || script.src && fetch(script.src).then(function (resp) {return resp.json()}) || Promise.resolve(JSON.parse(script.innerHTML)))\r\n          .then(function (json) {\r\n            return mergeImportMap(map, parseImportMap(json, script.src || baseUrl));\r\n          });\r\n        });\r\n      });\r\n    }\r\n\r\n    return importMapPromise\r\n    .then(function (importMap) {\r\n      return resolveImportMap(id, parentUrl, importMap);\r\n    });\r\n  };\n\n  const toStringTag$1 = typeof Symbol !== 'undefined' && Symbol.toStringTag;\r\n\r\n  systemJSPrototype.get = function (id) {\r\n    const load = this[REGISTRY][id];\r\n    if (load && load.e === null && !load.E) {\r\n      if (load.er)\r\n        return null;\r\n      return load.n;\r\n    }\r\n  };\r\n\r\n  systemJSPrototype.set = function (id, module) {\r\n    let ns;\r\n    if (toStringTag$1 && module[toStringTag$1] === 'Module') {\r\n      ns = module;\r\n    }\r\n    else {\r\n      ns = Object.assign(Object.create(null), module);\r\n      if (toStringTag$1)\r\n        Object.defineProperty(ns, toStringTag$1, { value: 'Module' });\r\n    }\r\n    const done = Promise.resolve(ns);\r\n    this.delete(id);\r\n    this[REGISTRY][id] = {\r\n      id: id,\r\n      i: [],\r\n      n: ns,\r\n      I: done,\r\n      L: done,\r\n      h: false,\r\n      d: [],\r\n      e: null,\r\n      er: undefined,\r\n      E: undefined,\r\n      C: done\r\n    };\r\n    return ns;\r\n  };\r\n\r\n  systemJSPrototype.has = function (id) {\r\n    const load = this[REGISTRY][id];\r\n    return load && load.e === null && !load.E;\r\n  };\r\n\r\n  // Delete function provided for hot-reloading use cases\r\n  systemJSPrototype.delete = function (id) {\r\n    const load = this.get(id);\r\n    if (load === undefined)\r\n      return false;\r\n    // remove from importerSetters\r\n    // (release for gc)\r\n    if (load && load.d)\r\n      load.d.forEach(function (depLoad) {\r\n        const importerIndex = depLoad.i.indexOf(load);\r\n        if (importerIndex !== -1)\r\n          depLoad.i.splice(importerIndex, 1);\r\n      });\r\n    return delete this[REGISTRY][id];\r\n  };\r\n\r\n  const iterator = typeof Symbol !== 'undefined' && Symbol.iterator;\r\n\r\n  systemJSPrototype.entries = function () {\r\n    const loader = this, keys = Object.keys(loader[REGISTRY]);\r\n    let index = 0, ns, key;\r\n    const result = {\r\n      next: function () {\r\n        while (\r\n          (key = keys[index++]) !== undefined && \r\n          (ns = loader.get(key)) === undefined\r\n        );\r\n        return {\r\n          done: key === undefined,\r\n          value: key !== undefined && [key, ns]\r\n        };\r\n      }\r\n    };\r\n\r\n    result[iterator] = function() { return this };\r\n\r\n    return result;\r\n  };\n\n}());\n"]}